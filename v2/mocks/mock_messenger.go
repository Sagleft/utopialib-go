// Code generated by MockGen. DO NOT EDIT.
// Source: ./v2/messenger.go

// Package bots is a generated GoMock package.
package bots

import (
	reflect "reflect"

	structs "github.com/Sagleft/utopialib-go/v2/pkg/structs"
	websocket "github.com/Sagleft/utopialib-go/v2/pkg/websocket"
	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// AcceptAuthRequest mocks base method.
func (m *MockClient) AcceptAuthRequest(pubkey, message string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptAuthRequest", pubkey, message)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptAuthRequest indicates an expected call of AcceptAuthRequest.
func (mr *MockClientMockRecorder) AcceptAuthRequest(pubkey, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptAuthRequest", reflect.TypeOf((*MockClient)(nil).AcceptAuthRequest), pubkey, message)
}

// CheckClientConnection mocks base method.
func (m *MockClient) CheckClientConnection() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckClientConnection")
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckClientConnection indicates an expected call of CheckClientConnection.
func (mr *MockClientMockRecorder) CheckClientConnection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckClientConnection", reflect.TypeOf((*MockClient)(nil).CheckClientConnection))
}

// CreateUUSDVoucher mocks base method.
func (m *MockClient) CreateUUSDVoucher(amount float64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUUSDVoucher", amount)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUUSDVoucher indicates an expected call of CreateUUSDVoucher.
func (mr *MockClientMockRecorder) CreateUUSDVoucher(amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUUSDVoucher", reflect.TypeOf((*MockClient)(nil).CreateUUSDVoucher), amount)
}

// CreateUUSDVoucherBatch mocks base method.
func (m *MockClient) CreateUUSDVoucherBatch(amount float64, count int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUUSDVoucherBatch", amount, count)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUUSDVoucherBatch indicates an expected call of CreateUUSDVoucherBatch.
func (mr *MockClientMockRecorder) CreateUUSDVoucherBatch(amount, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUUSDVoucherBatch", reflect.TypeOf((*MockClient)(nil).CreateUUSDVoucherBatch), amount, count)
}

// CreateVoucher mocks base method.
func (m *MockClient) CreateVoucher(amount float64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVoucher", amount)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVoucher indicates an expected call of CreateVoucher.
func (mr *MockClientMockRecorder) CreateVoucher(amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVoucher", reflect.TypeOf((*MockClient)(nil).CreateVoucher), amount)
}

// CreateVoucherBatch mocks base method.
func (m *MockClient) CreateVoucherBatch(amount float64, count int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVoucherBatch", amount, count)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVoucherBatch indicates an expected call of CreateVoucherBatch.
func (mr *MockClientMockRecorder) CreateVoucherBatch(amount, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVoucherBatch", reflect.TypeOf((*MockClient)(nil).CreateVoucherBatch), amount, count)
}

// EnableChannelReadOnly mocks base method.
func (m *MockClient) EnableChannelReadOnly(channelID string, readOnly bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableChannelReadOnly", channelID, readOnly)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnableChannelReadOnly indicates an expected call of EnableChannelReadOnly.
func (mr *MockClientMockRecorder) EnableChannelReadOnly(channelID, readOnly interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableChannelReadOnly", reflect.TypeOf((*MockClient)(nil).EnableChannelReadOnly), channelID, readOnly)
}

// EnableReadOnly mocks base method.
func (m *MockClient) EnableReadOnly(channelID string, readOnly bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableReadOnly", channelID, readOnly)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnableReadOnly indicates an expected call of EnableReadOnly.
func (mr *MockClientMockRecorder) EnableReadOnly(channelID, readOnly interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableReadOnly", reflect.TypeOf((*MockClient)(nil).EnableReadOnly), channelID, readOnly)
}

// GetBalance mocks base method.
func (m *MockClient) GetBalance() (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance")
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockClientMockRecorder) GetBalance() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockClient)(nil).GetBalance))
}

// GetChannelContacts mocks base method.
func (m *MockClient) GetChannelContacts(channelID string) ([]structs.ChannelContactData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannelContacts", channelID)
	ret0, _ := ret[0].([]structs.ChannelContactData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannelContacts indicates an expected call of GetChannelContacts.
func (mr *MockClientMockRecorder) GetChannelContacts(channelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelContacts", reflect.TypeOf((*MockClient)(nil).GetChannelContacts), channelID)
}

// GetChannelInfo mocks base method.
func (m *MockClient) GetChannelInfo(channelID string) (structs.ChannelData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannelInfo", channelID)
	ret0, _ := ret[0].(structs.ChannelData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannelInfo indicates an expected call of GetChannelInfo.
func (mr *MockClientMockRecorder) GetChannelInfo(channelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelInfo", reflect.TypeOf((*MockClient)(nil).GetChannelInfo), channelID)
}

// GetChannelMessages mocks base method.
func (m *MockClient) GetChannelMessages(channelID string, offset, maxMessages int) ([]structs.ChannelMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannelMessages", channelID, offset, maxMessages)
	ret0, _ := ret[0].([]structs.ChannelMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannelMessages indicates an expected call of GetChannelMessages.
func (mr *MockClientMockRecorder) GetChannelMessages(channelID, offset, maxMessages interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelMessages", reflect.TypeOf((*MockClient)(nil).GetChannelMessages), channelID, offset, maxMessages)
}

// GetChannelModeratorRights mocks base method.
func (m *MockClient) GetChannelModeratorRights(channelID, moderatorPubkey string) (structs.ModeratorRights, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannelModeratorRights", channelID, moderatorPubkey)
	ret0, _ := ret[0].(structs.ModeratorRights)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannelModeratorRights indicates an expected call of GetChannelModeratorRights.
func (mr *MockClientMockRecorder) GetChannelModeratorRights(channelID, moderatorPubkey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelModeratorRights", reflect.TypeOf((*MockClient)(nil).GetChannelModeratorRights), channelID, moderatorPubkey)
}

// GetChannelModerators mocks base method.
func (m *MockClient) GetChannelModerators(channelID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannelModerators", channelID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannelModerators indicates an expected call of GetChannelModerators.
func (mr *MockClientMockRecorder) GetChannelModerators(channelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelModerators", reflect.TypeOf((*MockClient)(nil).GetChannelModerators), channelID)
}

// GetChannels mocks base method.
func (m *MockClient) GetChannels(task structs.GetChannelsTask) ([]structs.SearchChannelData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannels", task)
	ret0, _ := ret[0].([]structs.SearchChannelData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannels indicates an expected call of GetChannels.
func (mr *MockClientMockRecorder) GetChannels(task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannels", reflect.TypeOf((*MockClient)(nil).GetChannels), task)
}

// GetContact mocks base method.
func (m *MockClient) GetContact(pubkeyOrNick string) (structs.ContactData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContact", pubkeyOrNick)
	ret0, _ := ret[0].(structs.ContactData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContact indicates an expected call of GetContact.
func (mr *MockClientMockRecorder) GetContact(pubkeyOrNick interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContact", reflect.TypeOf((*MockClient)(nil).GetContact), pubkeyOrNick)
}

// GetContacts mocks base method.
func (m *MockClient) GetContacts(filter string) ([]structs.ContactData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContacts", filter)
	ret0, _ := ret[0].([]structs.ContactData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContacts indicates an expected call of GetContacts.
func (mr *MockClientMockRecorder) GetContacts(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContacts", reflect.TypeOf((*MockClient)(nil).GetContacts), filter)
}

// GetFinanceHistory mocks base method.
func (m *MockClient) GetFinanceHistory(task structs.GetFinanceHistoryTask) ([]structs.FinanceHistoryData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFinanceHistory", task)
	ret0, _ := ret[0].([]structs.FinanceHistoryData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFinanceHistory indicates an expected call of GetFinanceHistory.
func (mr *MockClientMockRecorder) GetFinanceHistory(task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFinanceHistory", reflect.TypeOf((*MockClient)(nil).GetFinanceHistory), task)
}

// GetFinanceInfo mocks base method.
func (m *MockClient) GetFinanceInfo() (structs.FinanceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFinanceInfo")
	ret0, _ := ret[0].(structs.FinanceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFinanceInfo indicates an expected call of GetFinanceInfo.
func (mr *MockClientMockRecorder) GetFinanceInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFinanceInfo", reflect.TypeOf((*MockClient)(nil).GetFinanceInfo))
}

// GetNetworkConnections mocks base method.
func (m *MockClient) GetNetworkConnections() ([]structs.PeerInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkConnections")
	ret0, _ := ret[0].([]structs.PeerInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkConnections indicates an expected call of GetNetworkConnections.
func (mr *MockClientMockRecorder) GetNetworkConnections() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkConnections", reflect.TypeOf((*MockClient)(nil).GetNetworkConnections))
}

// GetOwnContact mocks base method.
func (m *MockClient) GetOwnContact() (structs.OwnContactData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOwnContact")
	ret0, _ := ret[0].(structs.OwnContactData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOwnContact indicates an expected call of GetOwnContact.
func (mr *MockClientMockRecorder) GetOwnContact() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwnContact", reflect.TypeOf((*MockClient)(nil).GetOwnContact))
}

// GetProfileStatus mocks base method.
func (m *MockClient) GetProfileStatus() (structs.ProfileStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileStatus")
	ret0, _ := ret[0].(structs.ProfileStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfileStatus indicates an expected call of GetProfileStatus.
func (mr *MockClientMockRecorder) GetProfileStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileStatus", reflect.TypeOf((*MockClient)(nil).GetProfileStatus))
}

// GetStickerImage mocks base method.
func (m *MockClient) GetStickerImage(collectionName, stickerName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStickerImage", collectionName, stickerName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStickerImage indicates an expected call of GetStickerImage.
func (mr *MockClientMockRecorder) GetStickerImage(collectionName, stickerName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStickerImage", reflect.TypeOf((*MockClient)(nil).GetStickerImage), collectionName, stickerName)
}

// GetStickerNamesByCollection mocks base method.
func (m *MockClient) GetStickerNamesByCollection(collectionName string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStickerNamesByCollection", collectionName)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStickerNamesByCollection indicates an expected call of GetStickerNamesByCollection.
func (mr *MockClientMockRecorder) GetStickerNamesByCollection(collectionName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStickerNamesByCollection", reflect.TypeOf((*MockClient)(nil).GetStickerNamesByCollection), collectionName)
}

// GetSyncProgress mocks base method.
func (m *MockClient) GetSyncProgress() (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSyncProgress")
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSyncProgress indicates an expected call of GetSyncProgress.
func (mr *MockClientMockRecorder) GetSyncProgress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSyncProgress", reflect.TypeOf((*MockClient)(nil).GetSyncProgress))
}

// GetUUSDBalance mocks base method.
func (m *MockClient) GetUUSDBalance() (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUUSDBalance")
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUUSDBalance indicates an expected call of GetUUSDBalance.
func (mr *MockClientMockRecorder) GetUUSDBalance() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUUSDBalance", reflect.TypeOf((*MockClient)(nil).GetUUSDBalance))
}

// GetWebSocketState mocks base method.
func (m *MockClient) GetWebSocketState() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebSocketState")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebSocketState indicates an expected call of GetWebSocketState.
func (mr *MockClientMockRecorder) GetWebSocketState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebSocketState", reflect.TypeOf((*MockClient)(nil).GetWebSocketState))
}

// JoinChannel mocks base method.
func (m *MockClient) JoinChannel(channelID string, password ...string) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{channelID}
	for _, a := range password {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "JoinChannel", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JoinChannel indicates an expected call of JoinChannel.
func (mr *MockClientMockRecorder) JoinChannel(channelID interface{}, password ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{channelID}, password...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinChannel", reflect.TypeOf((*MockClient)(nil).JoinChannel), varargs...)
}

// RejectAuthRequest mocks base method.
func (m *MockClient) RejectAuthRequest(pubkey, message string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RejectAuthRequest", pubkey, message)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RejectAuthRequest indicates an expected call of RejectAuthRequest.
func (mr *MockClientMockRecorder) RejectAuthRequest(pubkey, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectAuthRequest", reflect.TypeOf((*MockClient)(nil).RejectAuthRequest), pubkey, message)
}

// RemoveChannelMessage mocks base method.
func (m *MockClient) RemoveChannelMessage(channelID string, messageID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveChannelMessage", channelID, messageID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveChannelMessage indicates an expected call of RemoveChannelMessage.
func (mr *MockClientMockRecorder) RemoveChannelMessage(channelID, messageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveChannelMessage", reflect.TypeOf((*MockClient)(nil).RemoveChannelMessage), channelID, messageID)
}

// SendAuthRequest mocks base method.
func (m *MockClient) SendAuthRequest(pubkey, message string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAuthRequest", pubkey, message)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendAuthRequest indicates an expected call of SendAuthRequest.
func (mr *MockClientMockRecorder) SendAuthRequest(pubkey, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAuthRequest", reflect.TypeOf((*MockClient)(nil).SendAuthRequest), pubkey, message)
}

// SendChannelContactMessage mocks base method.
func (m *MockClient) SendChannelContactMessage(channelID, contactPubkeyHash, message string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendChannelContactMessage", channelID, contactPubkeyHash, message)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendChannelContactMessage indicates an expected call of SendChannelContactMessage.
func (mr *MockClientMockRecorder) SendChannelContactMessage(channelID, contactPubkeyHash, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendChannelContactMessage", reflect.TypeOf((*MockClient)(nil).SendChannelContactMessage), channelID, contactPubkeyHash, message)
}

// SendChannelMessage mocks base method.
func (m *MockClient) SendChannelMessage(channelID, message string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendChannelMessage", channelID, message)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendChannelMessage indicates an expected call of SendChannelMessage.
func (mr *MockClientMockRecorder) SendChannelMessage(channelID, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendChannelMessage", reflect.TypeOf((*MockClient)(nil).SendChannelMessage), channelID, message)
}

// SendChannelPicture mocks base method.
func (m *MockClient) SendChannelPicture(channelID, base64Image, comment, filenameForImage string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendChannelPicture", channelID, base64Image, comment, filenameForImage)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendChannelPicture indicates an expected call of SendChannelPicture.
func (mr *MockClientMockRecorder) SendChannelPicture(channelID, base64Image, comment, filenameForImage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendChannelPicture", reflect.TypeOf((*MockClient)(nil).SendChannelPicture), channelID, base64Image, comment, filenameForImage)
}

// SendInstantMessage mocks base method.
func (m *MockClient) SendInstantMessage(to, message string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendInstantMessage", to, message)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendInstantMessage indicates an expected call of SendInstantMessage.
func (mr *MockClientMockRecorder) SendInstantMessage(to, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendInstantMessage", reflect.TypeOf((*MockClient)(nil).SendInstantMessage), to, message)
}

// SendPayment mocks base method.
func (m *MockClient) SendPayment(task structs.SendPaymentTask) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendPayment", task)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendPayment indicates an expected call of SendPayment.
func (mr *MockClientMockRecorder) SendPayment(task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPayment", reflect.TypeOf((*MockClient)(nil).SendPayment), task)
}

// SetProfileData mocks base method.
func (m *MockClient) SetProfileData(nick, firstName, lastName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetProfileData", nick, firstName, lastName)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetProfileData indicates an expected call of SetProfileData.
func (mr *MockClientMockRecorder) SetProfileData(nick, firstName, lastName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProfileData", reflect.TypeOf((*MockClient)(nil).SetProfileData), nick, firstName, lastName)
}

// SetProfileStatus mocks base method.
func (m *MockClient) SetProfileStatus(status, mood string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetProfileStatus", status, mood)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetProfileStatus indicates an expected call of SetProfileStatus.
func (mr *MockClientMockRecorder) SetProfileStatus(status, mood interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProfileStatus", reflect.TypeOf((*MockClient)(nil).SetProfileStatus), status, mood)
}

// SetWebSocketState mocks base method.
func (m *MockClient) SetWebSocketState(task structs.SetWsStateTask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWebSocketState", task)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetWebSocketState indicates an expected call of SetWebSocketState.
func (mr *MockClientMockRecorder) SetWebSocketState(task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWebSocketState", reflect.TypeOf((*MockClient)(nil).SetWebSocketState), task)
}

// ToogleChannelNotifications mocks base method.
func (m *MockClient) ToogleChannelNotifications(channelID string, enabled bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToogleChannelNotifications", channelID, enabled)
	ret0, _ := ret[0].(error)
	return ret0
}

// ToogleChannelNotifications indicates an expected call of ToogleChannelNotifications.
func (mr *MockClientMockRecorder) ToogleChannelNotifications(channelID, enabled interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToogleChannelNotifications", reflect.TypeOf((*MockClient)(nil).ToogleChannelNotifications), channelID, enabled)
}

// UCodeEncode mocks base method.
func (m *MockClient) UCodeEncode(dataHexCode, coder, format string, imageSize int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UCodeEncode", dataHexCode, coder, format, imageSize)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UCodeEncode indicates an expected call of UCodeEncode.
func (mr *MockClientMockRecorder) UCodeEncode(dataHexCode, coder, format, imageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UCodeEncode", reflect.TypeOf((*MockClient)(nil).UCodeEncode), dataHexCode, coder, format, imageSize)
}

// UseVoucher mocks base method.
func (m *MockClient) UseVoucher(voucherID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UseVoucher", voucherID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UseVoucher indicates an expected call of UseVoucher.
func (mr *MockClientMockRecorder) UseVoucher(voucherID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseVoucher", reflect.TypeOf((*MockClient)(nil).UseVoucher), voucherID)
}

// WsSubscribe mocks base method.
func (m *MockClient) WsSubscribe(task websocket.WsSubscribeTask) (websocket.Handler, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WsSubscribe", task)
	ret0, _ := ret[0].(websocket.Handler)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WsSubscribe indicates an expected call of WsSubscribe.
func (mr *MockClientMockRecorder) WsSubscribe(task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WsSubscribe", reflect.TypeOf((*MockClient)(nil).WsSubscribe), task)
}
